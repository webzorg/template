#cloud-config
# mounts:
#   - [ /dev/disk/by-id/scsi-0DO_Volume_geth-node-volume2, /mnt/data, "ext4", "defaults,nofail,discard", "0", "0" ]

users:
  - name: devops
    groups: sudo
    shell: /bin/bash
    sudo: ["ALL=(ALL) ALL"]
    ssh-authorized-keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMCYcdhoFMqUYdDD+ZCWIsT6uJU843lOaFX7lpNePlYM lasha@deskgen

packages:
  - git
  - htop
  - nethogs
  - ufw
  - wget
  - curl
  - net-tools
  - fail2ban
  - nginx
  - nodejs
  - postgresql
  - libpq-dev
  - gawk
  - g++
  - gcc
  - autoconf
  - automake
  - bison
  - libc6-dev
  - libffi-dev
  - libgdbm-dev
  - libncurses5-dev
  - libsqlite3-dev
  - libtool
  - libyaml-dev
  - make
  - pkg-config
  - sqlite3
  - zlib1g-dev
  - libgmp-dev
  - libreadline-dev
  - libssl-dev

write_files:
  - path: /etc/environment
    content: |+
      %{etc_env}

  - path: /var/www/%{app_name}/shared/config/database.yml
    content: |
      default: &default
        adapter: postgresql
        encoding: unicode

      staging:
        <<: *default
        database: %{app_name}_staging

      production:
        <<: *default
        database: %{app_name}_production

  - path: /var/www/%{app_name}/shared/puma.rb
    content: |
      # Puma can serve each request in a thread from an internal thread pool.
      # The `threads` method setting takes two numbers: a minimum and maximum.
      # Any libraries that use thread pools should be configured to match
      # the maximum value specified for Puma. Default is set to 5 threads for minimum
      # and maximum; this matches the default thread size of Active Record.
      #
      threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
      threads threads_count, threads_count

      # Specifies the `port` that Puma will listen on to receive requests; default is 3000.
      #
      port        ENV.fetch("PORT") { 3000 }

      # Specifies the `environment` that Puma will run in.
      #
      environment ENV.fetch("RAILS_ENV") { "development" }

      directory "/var/www/%{app_name}/current"
      rackup "/var/www/%{app_name}/current/config.ru"

      tag ""

      pidfile "/var/www/%{app_name}/shared/tmp/pids/puma.pid"
      state_path "/var/www/%{app_name}/shared/tmp/pids/puma.state"
      stdout_redirect "/var/www/%{app_name}/shared/log/puma_access.log", "/var/www/%{app_name}/shared/log/puma_error.log", true

      bind "unix:///var/www/%{app_name}/shared/tmp/sockets/puma.sock"

      prune_bundler

      on_restart do
        puts "Refreshing Gemfile"
        ENV["BUNDLE_GEMFILE"] = ""
      end

      # Specifies the number of `workers` to boot in clustered mode.
      # Workers are forked webserver processes. If using threads and workers together
      # the concurrency of the application would be max `threads` * `workers`.
      # Workers do not work on JRuby or Windows (both of which do not support
      # processes).
      #
      workers ENV.fetch("WEB_CONCURRENCY") { 2 }

      # Use the `preload_app!` method when specifying a `workers` number.
      # This directive tells Puma to first boot the application and load code
      # before forking the application. This takes advantage of Copy On Write
      # process behavior so workers use less memory. If you use this option
      # you need to make sure to reconnect any threads in the `on_worker_boot`
      # block.
      #
      # preload_app!

      # If you are preloading your application and using Active Record, it's
      # recommended that you close any connections to the database before workers
      # are forked to prevent connection leakage.
      #
      # before_fork do
      #   ActiveRecord::Base.connection_pool.disconnect! if defined?(ActiveRecord)
      # end

      # The code in the `on_worker_boot` will be called if you are using
      # clustered mode by specifying a number of `workers`. After each worker
      # process is booted, this block will be run. If you are using the `preload_app!`
      # option, you will want to use this block to reconnect to any threads
      # or connections that may have been created at application boot, as Ruby
      # cannot share connections between processes.
      #
      # on_worker_boot do
      #   ActiveRecord::Base.establish_connection if defined?(ActiveRecord)
      # end
      #

      # Allow puma to be restarted by `rails restart` command.
      plugin :tmp_restart

  - path: /etc/systemd/system/puma.service
    content: |
      [Unit]
      Description=Puma Control
      After=network.target

      [Service]
      Type=forking
      User=devops
      WorkingDirectory=/var/www/%{app_name}/current

      EnvironmentFile=/etc/environment

      PIDFile=/var/www/%{app_name}/shared/tmp/pids/puma.pid

      ExecStart=/home/devops/.rvm/bin/rvm default do bundle exec puma -C /var/www/%{app_name}/shared/puma.rb --daemon

      ExecStop=/home/devops/.rvm/bin/rvm default do bundle exec pumactl -S /var/www/%{app_name}/shared/tmp/pids/puma.state -F /var/www/%{app_name}/shared/puma.rb stop

      Restart=always
      # RestartSec=10

      [Install]
      WantedBy=default.target

  # - path: "/etc/systemd/system/custom_template.service"
  #   content: |
  #     [Unit]
  #     Description=
  #     After=network.target

  #     [Service]
  #     Type=simple
  #     User=devops
  #     WorkingDirectory=

  #     # EnvironmentFile=/etc/environment

  #     ExecStart=

  #     Restart=always
  #     RestartSec=30

  #     [Install]
  #     WantedBy=default.target

  - path: /etc/nginx/sites-available/%{app_name}
    content: |
      server {
        listen 80 default_server;
        listen [::]:80 default_server;
        # listen 443 default_server;
        # listen [::]:443 default_server;

        # ssl                 on;
        # ssl_certificate     /etc/ssl/%{app_name}.com.pem;
        # ssl_certificate_key /etc/ssl/%{app_name}.com.key;

        root /var/www/%{app_name}/current/public;

        index index.html;

        server_name _;
        # server_name %{app_name}.com;

        error_page 403 /403.html;
        location /403.html {
          root /var/www/%{app_name}/current/public;
          allow all;
          access_log off;
        }

        location / {
          # include /var/www/%{app_name}/current/lib/fail2ban/denied_hosts;
          proxy_cache_bypass $http_secret_header;
          try_files $uri @application;
        }

        location @application {
          proxy_pass http://127.0.0.1:3000;
          proxy_set_header Host $host;
          #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          #proxy_set_header X-Forwarded-Proto $scheme;
          #proxy_set_header X-Forwarded-Ssl on;
          #proxy_set_header X-Forwarded-Port $server_port;
          #proxy_set_header X-Forwarded-Host $host;
        }

        location /cable {
          proxy_pass http://unix:///var/www/%{app_name}/shared/tmp/sockets/puma.sock;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
      }

runcmd:
  # Format Volume
  # - mkfs.ext4 -F /dev/disk/by-id/scsi-0DO_Volume_geth-node-volume2

  # Does same as (mounts:)
  # - mkdir -p /mnt/cardano-volume
  # - mount -o discard,defaults /dev/disk/by-id/scsi-0DO_Volume_cardano-volume /mnt/cardano-volume
  # - echo "/dev/disk/by-id/scsi-0DO_Volume_cardano-volume /mnt/cardano-volume ext4 defaults,nofail,discard 0 0" | tee -a /etc/fstab

  # Secure SSHD
  - [sed, -i, -e, "s/PermitRootLogin yes/PermitRootLogin no/g",                /etc/ssh/sshd_config]
  - [sed, -i, -e, "s/#PasswordAuthentication yes/PasswordAuthentication no/g", /etc/ssh/sshd_config]
  # - [sed, -i, -e, "s/color_scheme=0/color_scheme=5/g",                    $HOME/.config/htop/htoprc]
  - [systemctl, restart, sshd]
  - [rm, -f, /root/.ssh/authorized_keys]
  - [rm, /etc/nginx/sites-enabled/default]
  - [ln, -s, /etc/nginx/sites-available/%{app_name}, /etc/nginx/sites-enabled/]
  # Secure UFW
  - [ufw, default, deny, incoming]
  - [ufw, default, allow, outgoing]
  - [ufw, allow, ssh]
  - [ufw, enable]
  - [/bin/su, -s, /bin/bash, -c, "gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB", -, devops]
  - [/bin/su, -s, /bin/bash, -c, '\curl -sSL https://get.rvm.io | bash -s stable', -, devops]
  - [/bin/su, -s, /bin/bash, -c, "source ~/.profile", -, devops]
  - [/bin/su, -s, /bin/bash, -c, "rvm autolibs disable", -, devops]
  - [/bin/su, -s, /bin/bash, -c, "rvm install %{ruby_version}", -, devops]
  - [/bin/su, -s, /bin/bash, -c, "rvm use --default %{ruby_version}", -, devops]
  - [/bin/su, -s, /bin/bash, -c, "gem install bundler", -, devops]
  # Setup Postgresql
  - [/bin/su, -s, /bin/bash, -c, "psql -U postgres postgres -c 'CREATE USER devops SUPERUSER;'", -, postgres]
  - [/bin/su, -s, /bin/bash, -c, "psql -U postgres postgres -c 'CREATE DATABASE devops WITH OWNER devops;'", -, postgres]
  # App/capistrano related
  # - [mkdir, /var/www/%{app_name}]
  # - [mkdir, /var/www/%{app_name}/shared]
  - [mkdir, /var/www/%{app_name}/shared/log]
  - [mkdir, /var/www/%{app_name}/shared/tmp]
  - [mkdir, /var/www/%{app_name}/shared/tmp/pids]
  - [mkdir, /var/www/%{app_name}/shared/tmp/cache]
  - [mkdir, /var/www/%{app_name}/shared/tmp/sockets]
  - [mkdir, /var/www/%{app_name}/shared/public]
  - [mkdir, /var/www/%{app_name}/shared/public/system]
  - [chown, -R, "devops:devops", /var/www/%{app_name}]
  - "curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -"
  - "echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list"
  - [apt, update]
  - [apt, install, -y, yarn]
  - [systemctl, daemon-reload]
  - [systemctl, enable, puma.service]
  - [ln, -s, /var/www/%{app_name}, /home/devops/%{app_name}]
  - [chown, -R, "devops:devops", /home/devops/]
  - [createdb, -U, devops, "%{app_name}_production"]

chpasswd:
  list: |
    root:$6$3ic.5.JBEd$w4fiaUcuuNVYEPiIzt62VDzfQC/jw8891rTRgIGLT0YRAKYN.bvjUjDhB71xu1umYyLUzrciyemAS2qeSiTWJ1
    devops:$6$JQY22uVQLzx$O/tXdevFnIDT0/72fxC.XelyMd4gLU7VHyTTqS4Ja1nl3UBwMN.CZ4MC6GO58BncNvGyvAe7j7M1hzqEdEYGw/

power_state:
  timeout: 0
  message: Cloud-init Rebooting...
  mode: reboot